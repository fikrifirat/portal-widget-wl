extends ../layout

block extra_head
  link(href="./stylesheets/vxb-widget.css" rel="stylesheet")
  link(href="./lib/angular-bootstrap-colorpicker/css/colorpicker.min.css" rel="stylesheet")

block content
  script.
    require([
      'angular',
      'angular-cookies',
      'angular-sanitize',
      'angular-toast',
      'angular-bootstrap-colorpicker',
      'angulartics',
      'angulartics-google-analytics',
      'jquery',
      'controllers/widget.portal',
      'directives/qtip',
      'directives/http.prefix'
    ],
    function(
      angular, ngCookies, ngSanitize, ngToast, colorPicker, angulartics, angularticsGoogleAnalytics, $,
      WidgetEditController, qtipDirective,
      httpPrefixDirective) {

        angular.module('voxboneApp', ['ngCookies','ngSanitize', 'ngToast', 'colorpicker.module','angulartics','angulartics.google.analytics'])
          .directive('qtip', qtipDirective)
          .directive('httpPrefix', httpPrefixDirective)
          .controller('EditWidgetController', WidgetEditController);

        angular.bootstrap(document, ['voxboneApp']);

        require(['#{process.env.APP_URL}/click2vox.js']);

    });

  .voxButton#voxButtonPreview(data-div_css_class_name="hidden"
  data-voxbone_webrtc_username='#{widget.webrtc_username}'
  data-voxbone_webrtc_password='#{widget.webrtc_password}'
  data-basic_auth='#{widget.basic_auth == 1 ? "true" : "false" }'
  )

  .main.createButton(ng-controller="EditWidgetController" ng-init="initData={widget: #{JSON.stringify(widget)}, did: #{widget.did}, widgetCode: '', username: '#{widget.webrtc_username}'}")
    .header
      .container
        .row
          .col-xs-12
            .portal-title Create a WebRTC Call Button for +#{params.e164}
        .row
          .col-xs-12
            .note
              if params.basic_auth == 1
                p #[b Note:] this will create a code widget that can be embedded into any page that allows for JS code and will allow customers to call without installing any software.
              else
                p #[b Note:] web service needs to be installed to keep your password secret.  Install #[a(href="https://github.com/voxbone/webrtc-auth-servlet") webrtc-auth-servlet] or #[a(href="https://github.com/voxbone/webrtc-auth-perl") webrtc-auth-perl].
                  |&nbsp;&nbsp;Alternatively enable basic authentication on this did in the customer portal and then return to this page to have a widget with your api key directly embedded into the generated html.

            #alert-success.alert.alert-warning.ng-cloak(ng-show="!isWebRTCSupported()") #[i.glyphicon.glyphicon-exclamation-sign] You are using a browser that does not support WebRTC. You can configure and preview your buttons, but you will not be able to place test calls. Please use Chrome or Firefox for maximum functionality.
            #alert-success.alert.alert-success(style="display: none;")

    .container
      .body(ng-class="{newButton: !isWebRTCSupported()}")
        .row
          .col-md-6.left-col
            form#widget_form(name="widget_form" novalidate)
              section
                span.title Button Configuration
                .boxPanel.options-group
                  .form-group(analytics-on analytics-event="Button Configuration" analytics-label="Button Label")
                    label Button Label
                    input.form-control(type="text" name="button_label" ng-blur="generateWidgetCode()" ng-model="widget.button_label" value="#{defaultBtnLabel}" placeholder="i.e. #{defaultBtnLabel}")

                  if params.basic_auth == '0'
                    .form-group(analytics-on analytics-event="Button Configuration" analytics-label="Server Auth Url")
                      label Server Auth Url:
                      input.form-control(
                        type="text", name="server_auth_url",
                        ng-model-options="{updateOn: 'blur'}"
                        ng-model="widget.server_auth_url"
                        ng-pattern="/^(http|https):.+$/"
                        ng-blur="validateAuthUri(widget_form)",
                        ng-focus="resetUriFlags()"
                        placeholder="i.e. https://tomcat.server/servlet/auth"
                        required
                      )
                      div(ng-cloak ng-show="widget_form.server_auth_url.$touched")
                        div(style="color: red" ng-show="widget_form.server_auth_url.$error.required") HTTP Auth URI is required
                        div(style="color: red" ng-show="widget_form.server_auth_url.$error.pattern") HTTP Auth URI must be valid
                        div(style="color: green" ng-show="validAuthUri") Valid Auth Sever Detected
                        div(style="color: red" ng-show="invalidAuthUri") Url not a valid Auth Sever

                  .form-group
                    label Button Style
                    .button-text
                      button.btn-style-a(analytics-on analytics-event="Button Style" analytics-label="Blue Theme" ng-cloak ng-click="setTheme('style-a')") #[span {{ widget.button_label || '#{defaultBtnLabel}' }}]
                      div(ng-cloak) Blue Theme
                    .button-text
                      button.btn-style-b(analytics-on analytics-event="Button Style" analytics-label="Purple Theme" ng-cloak ng-click="setTheme('style-b')") #[span {{ widget.button_label || '#{defaultBtnLabel}' }}]
                      div(ng-cloak) Purple Theme
                    .button-text
                      button.btn-style-c(analytics-on analytics-event="Button Style" analytics-label="Custom Theme" ng-cloak ng-click="setCustomTheme()" colorpicker colorpicker-position="right" ng-model="widget.button_color" ng-blur="generateWidgetCode()" ng-style="{'background': widget.button_color ? widget.button_color : tempButtonColor }") #[span {{ widget.button_label || '#{defaultBtnLabel}' }}]
                      div(ng-cloak) Custom Theme

                  .panel-heading
                    a.collapsed.title-toggle(data-toggle="collapse", data-target="#extraConfiguration", href="#extraConfiguration") Extra Configuration
                  .panel-collapse.collapse#extraConfiguration
                    .options-wrap.active
                      .form-group(analytics-on analytics-event="Extra Configuration" analytics-label="Show frame")
                        div(style="display:inline-block;")
                          input(id='show_frame' type='checkbox' name='show_frame' ng-model='widget.show_frame' )
                          label(for='show_frame') #[span]  Show frame
                            .badge(data-toggle='tooltip' data-placement="top" title="Shows/Hides the background and border of the button") ?
                        div(style="display:inline-block;")
                            span(style="margin-left:20px" ng-show='widget.show_frame') Pick frame color #[div.glyphicon.glyphicon-tint(tabindex="0" aria-hidden='true' colorpicker colorpicker-position="right" ng-model="widget.frame_color" ng-blur="generateWidgetCode()" style="cursor: pointer" ng-style="{'color': widget.frame_color || 'black'}")]

                      .form-group(analytics-on analytics-event="Extra Configuration" analytics-label="Test user setup")
                        input(id='test_setup' type='checkbox' name='test_setup' ng-model='widget.test_setup')
                        label(for='test_setup') #[span] Test user setup
                          .badge(data-toggle='tooltip' data-placement="top" title="Place a link to test the users's WebRTC setup") ?

                      .form-group(analytics-on analytics-event="Extra Configuration" analytics-label="Show branding")
                        input(id='show_branding' type='checkbox' name='show_branding' ng-model='widget.show_branding')
                        label(for='show_branding') #[span] Show branding
                          .badge(data-toggle='tooltip' data-placement="top" title="Toggles Voxbone branding from button and popup") ?

                span.title Call Configuration
                .boxPanel.options-group
                  .panel-heading
                    a.collapsed.title-toggle(data-toggle="collapse", data-target="#collapseAdvancedCallConfiguration",href="#collapseAdvancedCallConfiguration") Advanced Call Configuration
                  .panel-collapse.collapse#collapseAdvancedCallConfiguration
                    .options-wrap.active
                      .form-group(analytics-on analytics-event="Advanced Call Configuration" analytics-label="Caller ID")
                        label(for="btn-context") Caller ID
                          span.badge(data-toggle="tooltip" data-placement="top" title="Enter the Caller ID that you would like sent with your Click2Vox widget calls (Only valid URI characters will be sent)") ?
                        input.form-control(type="text" name="caller_id" ng-model-options="{updateOn: 'blur'}" ng-model="widget.caller_id" value="click2vox" placeholder="i.e. click2vox_demo")
                      .form-group(analytics-on analytics-event="Advanced Call Configuration" analytics-label="Context")
                        label(for="btn-context") Context
                          span.badge(data-toggle='tooltip' data-placement="top" title="Send custom data to your SIP server using the X-Voxbone-Context header. Make sure to configure your SIP server to process this header.") ?
                        input.form-control(type="text" name="context" ng-model-options="{updateOn: 'blur'}" ng-model="widget.context")
                      .form-group(analytics-on analytics-event="Advanced Call Configuration" analytics-label="DTMF Dial Pad")
                        input(id='dial_pad' type="checkbox" name="dial_pad" ng-model="widget.dial_pad")
                        label(for='dial_pad') #[span] &nbsp; DTMF Dial Pad
                          .badge(data-toggle="tooltip" data-placement="top" title="Display a dialpad to allow your users to enter DTMF digits during a call.") ?
                      .form-group(analytics-on analytics-event="Advanced Call Configuration" analytics-label="Send Digits")
                        label(for="btn-context") Send Digits #[span.badge(data-toggle='tooltip' data-placement="top" data-html="true" title="Automatically send DTMF digit(s) after a call is connected. This is useful for automatically navigating IVRs or entering access codes for a conference bridge. Digits should use the following format: <br><br>1,2,3,1200ms,4,5,900ms,6,#<br><br>This string will generate 1 2 3, wait 1200 milliseconds, enter 4, 5, wait 900 milliseconds then enter 6, #") ?]
                        input.form-control(type="text" name="send_digits" ng-model-options="{updateOn: 'blur'}" ng-model="widget.send_digits")
                      .form-group(analytics-on analytics-event="Advanced Call Configuration" analytics-label="Ask for Rating")
                        input(id='rating' type="checkbox" name="rating" ng-model="widget.rating")
                        label(for='rating') #[span] &nbsp; Ask for rating after the call ends
                          .badge(data-toggle='tooltip' data-placement="top" title="Ask the user/caller to rate after the call ends") ?
                  .panel-heading
                    a.collapsed.title-toggle(data-toggle="collapse" data-target="#collapseIncompatileBrowserConfiguration" href="#collapseIncompatileBrowserConfiguration") Incompatible Browser Configuration
                  .panel-collapse.collapse#collapseIncompatileBrowserConfiguration
                    .options-wrap.active.incompatible
                      .form-group(analytics-on analytics-event="Incompatible Browser Configuration" analytics-label="Hide the widget")
                        label.hide_widget
                          input(type="radio" name="incompatible_browser_configuration" ng-model="widget.incompatible_browser_configuration" value="hide_widget")
                          span.radio-name Hide the widget
                          span.badge(data-toggle='tooltip' data-placement="top" title="If the visitor’s browser does not support WebRTC, hide the widget") ?
                      .form-group(analytics-on analytics-event="Incompatible Browser Configuration" analytics-label="Link button to a page")
                        label.link_button_to_a_page
                          input(type="radio" name="incompatible_browser_configuration" ng-model="widget.incompatible_browser_configuration" value="link_button_to_a_page")
                          span.radio-name Link button to a page
                          span.badge(data-toggle='tooltip' data-placement="top" title="If the visitor’s browser does not support WebRTC, specify a URL to go to when the button is clicked") ?
                        input.form-control(http-prefix type="url" name="link_button_to_a_page_value" ng-model="widget.link_button_to_a_page_value" ng-show="widget.incompatible_browser_configuration == 'link_button_to_a_page'" placeholder="i.e. https://mysite.com")
                      .form-group(analytics-on analytics-event="Incompatible Browser Configuration" analytics-label="Show text/HTML")
                        label.show_text_html
                          input(type="radio" name="incompatible_browser_configuration" ng-model="widget.incompatible_browser_configuration" value="show_text_html")
                          span.radio-name Show text/HTML
                          span.badge(data-toggle="tooltip" data-placement="top" title="Instead of showing the button, display the entered HTML ") ?
                        textarea.form-control(type="text" name="show_text_html_value", placeholder="Enter text or HTML" ng-show="widget.incompatible_browser_configuration == 'show_text_html'" ng-bind-html="widget.show_text_html_value" ng-model-options="{updateOn: 'blur'}" ng-model="widget.show_text_html_value")

          .col-md-6.right-col
            .section
              include preview_widget
Add Comment
